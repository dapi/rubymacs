#!/usr/bin/env ruby

require 'optparse'
require 'stringio'
require 'socket'
require 'shellwords'
require 'pathname'

def Shellwords.unshellwords(array)
  array.map {|elt| elt.index(/\s/) ? "\"#{elt.gsub(/([\"\\$])/, '\\1')}\"" : elt}.join(' ')
end

# win32-deamon class
module Win32
  class Daemon
    def self.set_proc(proc)
      @@proc = proc
    end
    
    def service_main
      @@proc.call method(:running?)
    end
  end
end

class RSense
  IS_WIN = /mswin(?!ce)|mingw|cygwin|bccwin/ =~ RUBY_PLATFORM.downcase
  END_MARK = 'END'
  USE_HEART_BEAT = true
  SERVICE_NAME = 'RSense'

  def initialize(args)
    @rsense_home  = ENV['RSENSE_HOME'] || File.dirname(File.dirname(File.expand_path($0)))
    @socket_path  = ENV['RSENSE_SOCKET']
    @classpath    = ENV['RSENSE_CLASSPATH']
    @pid_file     = ENV['RSENSE_PID_FILE']
    @log          = ENV['RSENSE_LOG']
    @service_log  = ENV['RSENSE_SERVICE_LOG']
    @debug        = ENV['RSENSE_DEBUG']
    @config       = ENV['RSENSE_CONFIG']
    @oneshot      = false
    @args         = args.dup
  end

  def process_args
    OptionParser.new do |opt|
      help = false
      opt.on('--home=HOME')             {|v| @rsense_home = v }
      opt.on('--socket=PATH')           {|v| @socket_path = v }
      opt.on('--classpath=CLASSPATH')   {|v| @classpath = v }
      opt.on('--pid-file=PIDFILE')      {|v| @pid_file = v }
      opt.on('--log=LOGFILE')           {|v| @log = v }
      opt.on('--debug')                 { @debug = true }
      opt.on('--config=CONFIG')         {|v| @config = v }
      opt.on('--oneshot')               { @oneshot = true }
      opt.on('-h', '--help')            { help = true }
      opt.order! @args

      @args.unshift 'help' if @args.empty? || help
    end

    @socket_path ||= IS_WIN ? 'localhost:77367' : '/tmp/rsense-socket'
    @host, @port = $1, $2.to_i if /^(\w+):(\d+)+$/ =~ @socket_path

    @pid_file ||= IS_WIN ? File.join(@rsense_home, 'rsense-pid') : '/tmp/rsense-pid'

    @service_log ||= File.join(@rsense_home, 'rsense-service.log') if IS_WIN
    
    @classpath ||= '.' + ['', 'rsense.jar', 'antlr-runtime-3.2.jar', 'jruby.jar'].join(File.join(File::PATH_SEPARATOR + @rsense_home, 'lib', ''))

    @config ||= File.join(ENV['HOME'], '.rsense')
  end

  def daemonize
    if Process.respond_to? :daemon  # Ruby 1.9
      Process.daemon
    else                            # Ruby 1.8
      require 'webrick'
      WEBrick::Daemon.start
    end
  end

  def open_server(&block)
    if @host
      TCPServer.open(@host, @port, &block)
    else
      UNIXServer.open(@socket_path, &block)
    end
  end

  def close_server
    File.unlink(@socket_path) rescue nil unless @host
    File.unlink(@pid_file) rescue nil
  end

  def wait_for_server
    100.times do
      return if File.exists? @pid_file
      sleep 0.1
    end
    die "No server response.\nTry to kill the process and delete pid file #@pid_file."
  end

  def server_process(cont_proc = nil)
    begin
      command = %W(java -cp #@classpath org.cx4a.rsense.Main script)
      command += %W(--home=#@rsense_home --no-prompt --end-mark=#{END_MARK} --config=#@config)
      command << '--debug' if @debug
      command << "--log=#@log" if @log
      command << '--progress=1' if USE_HEART_BEAT
      if RUBY_VERSION < '1.9.0'
        # IO.popen can't take an array for a first argument
        command = Shellwords.unshellwords(command)
      end

      io = IO.popen(command, 'r+')

      (Signal.list.keys & %w(INT TERM CHLD)).each do |sig|
        trap(sig) do
          begin
            puts "singal: #{sig}"
            close_server
            io.close if io && !io.closed?
          ensure
            exit 127
          end
        end
      end

      open_server do |serv|
        begin
          open(@pid_file, 'w') {|f| f.write($$)}
          puts "start: #{@host ? (@host + ':' + @port.to_s) : @socket_path} (#$$)"
          loop do
            begin
              break if cont_proc && !cont_proc.call
              next unless select([serv], nil, nil, 0.1)
              sock = serv.accept
              cmd = sock.gets
              puts "recv: #{cmd}"
              if /^(exit|quit)/ =~ cmd
                sock.puts END_MARK
                sock.close
                break
              end
              io.puts cmd
              sock.close_read
              while l = io.gets and /^#{END_MARK}/ !~ l
                sock.write l
              end
              sock.puts END_MARK
              sock.close_write
              return if @oneshot
            rescue Errno::EPIPE, Errno::ECONNRESET
            ensure
              sock.close if sock && !sock.closed?
            end
          end
        ensure
          puts 'stop'
          close_server
        end
      end
    rescue
      $stderr.puts "Exception: #{$!.message}"
      $stderr.puts $!.backtrace
    ensure
      io.close if io && !io.closed?
    end
  end

  def start_server
    case @args[0]
    when 'server', 'zap', 'service'
      # do nothing here
    else
      # already started
      return if File.exists? @pid_file
      
      die "Server daemon is not supported in Windows.\nRegister service instead like:

    > ruby #{$0} service create

And start service like:

    > ruby #{$0} service start" if IS_WIN

      fork do
        daemonize
        server_process
      end
      wait_for_server
    end
  end

  def open_client(&block)
    if @host
      TCPSocket.open(@host, @port, &block)
    else
      UNIXSocket.open(@socket_path, &block)
    end
  rescue
    die('server is not running')
  end

  def exec_command
    args = @args
    case args[0]
    when 'server'
      close_server
      server_process
      exit
    when 'zap'
      File.unlink @pid_file rescue nil
      args = ['exit']
    when 'service'
      begin
        require 'rubygems'
        require 'win32/service'
        require 'win32/daemon'
      rescue LoadError
        die 'Please install win32-service and win32-daemon gems first.'
      end
      case args[1]
      when 'create'
        path = Pathname.new(@rsense_home).realpath
        command = Shellwords.unshellwords %W(rubyw.exe #{path}/bin/rsense --config=#@config service daemon)
        Win32::Service.create(:service_name       => SERVICE_NAME,
                              :service_type       => Win32::Service::WIN32_OWN_PROCESS,
                              :description        => 'RSense Service',
                              :start_type         => Win32::Service::DEMAND_START,
                              :binary_path_name   => command,
                              :display_name       => 'RSense')
      when 'delete'
        Win32::Service.delete(SERVICE_NAME)
      when 'daemon'
        $stdout = $strerr = open(@service_log, 'a')
        # Redefine puts() not to hang Windows service (I don't know why)
        def puts(*a)
          $stdout.puts *a
          $stdout.flush
        end
        Win32::Daemon.set_proc method(:server_process)
        Win32::Daemon.mainloop
      when 'start'
        Win32::Service.start(SERVICE_NAME)
        puts 'Service started'
      when 'stop'
        Win32::Service.stop(SERVICE_NAME)
        puts 'Service stopped'
      when 'status'
        puts Win32::Service.status(SERVICE_NAME).current_state.capitalize
      else
        die 'Please specify create/delete/start/stop/status as an argument.'
      end
      exit
    end
    open_client do |sock|
      sock.puts Shellwords.unshellwords(args)
      sock.close_write

      t = timeout = USE_HEART_BEAT ? 5 : 15;
      continue = true
      thread = Thread.new do
        while continue && t > 0
          t -= 1
          sleep 1
        end
        continue = false
      end
      while continue and l = sock.gets and /^#{END_MARK}/ !~ l
        if /^progress:/ =~ l
          # update timeout with heat beating
          t = timeout
        else
          print l
        end
      end
      continue = false
      thread.exit
      thread.join
    end
  end

  def process
    process_args
    start_server
    exec_command
  end

  def die(msg)
    $stderr.puts msg
    exit 1
  end
end

RSense.new(ARGV).process if $0 == __FILE__
